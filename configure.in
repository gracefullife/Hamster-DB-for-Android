dnl
dnl configuration script for hamsterdb
dnl
dnl Copyright (C) 2005-2008 Christoph Rupp (chris@crupp.de).
dnl All rights reserved. See file LICENSE for licence and copyright
dnl information
dnl

dnl Initialize autoconf/automake
AC_INIT(hamsterdb, 1.1.4)
AC_CONFIG_SRCDIR(src/hamsterdb.c)
AC_CONFIG_AUX_DIR(build/scripts)
AM_INIT_AUTOMAKE(hamsterdb, 1.1.4)

AM_CONFIG_HEADER(config.h)

AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_LIBTOOL_WIN32_DLL
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_HEADER_STDC
AC_C_CONST
AC_TYPE_SIZE_T
AC_CHECK_FUNCS(mmap munmap getpagesize)
AC_CHECK_HEADERS(fcntl.h unistd.h malloc.h)
AC_TYPE_OFF_T
AC_FUNC_MMAP
AC_CANONICAL_SYSTEM

# ARM emulators w/ qemu: disable pread/pwrite; the functions exist, but
# seem to be buggy
case $host in
    arm-*-linux-gnu)
        ;;
    *)
        AC_CHECK_FUNCS(pread pwrite)
        ;;
esac

# A string describing all enabled/disabled settings
settings=""

# Default settings: -Wall and -O3
CFLAGS="${CFLAGS} -Wall"
CFLAGS=`echo "$CFLAGS" | sed 's/-O. /-O3 /g'`

#
# Debug mode
#
AC_ARG_ENABLE(debug,
    AC_HELP_STRING([--enable-debug],
        [Build with diagnostics and debug symbols (slow!)]))
if test "$enable_debug" = "yes"
then
    CFLAGS=`echo "$CFLAGS" | sed 's/-O. / /g'`
    CFLAGS="${CFLAGS} -g -DHAM_DEBUG"
    settings="$settings (debug)"
fi

#
# Profiling mode
#
AC_ARG_ENABLE(profile,
    AC_HELP_STRING([--enable-profile],
        [Build with profiling information (gprof)]))
if test "$enable_profile" = "yes"
then
    CFLAGS="${CFLAGS} -pg"
    settings="$settings (profile)"
fi

#
# track test coverage
#
AC_ARG_ENABLE(gcov,
    AC_HELP_STRING([--enable-gcov],
        [Build with test coverage information (gconf)]))
if test "$enable_gcov" = "yes"
then
    CFLAGS="${CFLAGS} -fprofile-arcs -ftest-coverage"
    settings="$settings (test-coverage)"
fi

#
# Enable internal functions
#
AC_ARG_ENABLE(internal,
    AC_HELP_STRING([--enable-internal],
        [Enables internal functions (ham_check_integrity)]))
if test "$enable_internal" = "yes"
then
    CFLAGS="${CFLAGS} -DHAM_ENABLE_INTERNAL"
    settings="$settings (internal)"
fi

#
# Disable AES encryption
#
AC_ARG_ENABLE(encryption,
    AC_HELP_STRING([--disable-encryption], 
                   [Disable AES encryption (ham_enable_encryption)]))
if test "$enable_encryption" = "no"; then
    CFLAGS="${CFLAGS} -DHAM_DISABLE_ENCRYPTION"
    settings="$settings (no encryption)"
fi
AM_CONDITIONAL(ENABLE_ENCRYPTION, test "x$enable_encryption" != "xno")

#
# Disable zlib compression
#
AC_ARG_ENABLE(compression,
    AC_HELP_STRING([--disable-compression], 
                   [Disable zlib compression (ham_enable_compression)]))
if test "$enable_compression" = "no"; then
    CFLAGS="${CFLAGS} -DHAM_DISABLE_COMPRESSION"
    settings="$settings (no compression)"
fi
AM_CONDITIONAL(ENABLE_COMPRESSION, test "x$enable_compression" != "xno")

#
# Use system zlib
#
AC_ARG_ENABLE(system-zlib,
    AC_HELP_STRING([--enable-system-zlib],
        [Use an already installed zlib]))
if test "$enable_system_zlib" = "yes"
then
    CFLAGS="${CFLAGS} -DHAM_USE_SYSTEM_ZLIB"
    settings="$settings (system-zlib)"
fi
AM_CONDITIONAL(SYSTEM_ZLIB, test "x$enable_system_zlib" == "xyes")

#
# Check for little endian/big endian
#
AC_C_BIGENDIAN(
        ac_big_endian=yes,
        ac_big_endian=no,
        ac_big_endian=no)
if test $ac_big_endian = yes; then
    CFLAGS="${CFLAGS} -DHAM_BIG_ENDIAN"
    settings="$settings (big endian)"
else
    CFLAGS="${CFLAGS} -DHAM_LITTLE_ENDIAN"
    settings="$settings (little endian)"
fi

#
# Check for __FUNCTION__ macro
#
AC_CACHE_CHECK(whether the compiler supports __FUNCTION__ macro,
               ac_cv_FUNCTION1,
    [AC_TRY_RUN([
int main(void) {
    char *p=__FUNCTION__;
    return 0;
}],ac_cv_FUNCTION1=yes,ac_cv_FUNCTION1=no,ac_cv_FUNCTION1=no)])
if test $ac_cv_FUNCTION1 = yes; then
    AC_DEFINE(HAVE_FUNCTION_MACRO,1,[__FUNCTION__ is supported])
fi

#
# Check if we use gcc > 4.4 - if yes, disable some optimizations
#
AC_CACHE_CHECK(whether we need -fno-tree-vectorize,
               ac_cv_FUNCTION2,
    [AC_TRY_RUN([
int main(void) {
#if !(__GNUC__ == 4 && __GNUC_MINOR__ >= 4)
#error "this gcc is ok"
#endif
    return 0;
}],ac_cv_FUNCTION2=yes,ac_cv_FUNCTION2=no,ac_cv_FUNCTION2=no)])
if test $ac_cv_FUNCTION2 = yes; then
    CFLAGS="${CFLAGS} -fno-tree-vectorize"
fi

#
# Check for O_LARGEFILE
#
AC_CACHE_CHECK(for support of the O_LARGEFILE flag,ac_cv_largefile,
    [AC_TRY_RUN([
#define _GNU_SOURCE   1 /* for O_LARGEFILE */
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
int main(void) {
    int i=(int)O_LARGEFILE;
    return 0;
}],ac_cv_largefile=yes,ac_cv_largefile=no,ac_cv_largefile=no)])
if test $ac_cv_largefile = yes; then
    AC_DEFINE(HAVE_O_LARGEFILE,1,[flag O_LARGEFILE is supported])
fi

#
# Check for O_NOATIME
#
AC_CACHE_CHECK(for support of the O_NOATIME flag,ac_cv_noatime,
    [AC_TRY_RUN([
#define _GNU_SOURCE   1 /* for O_NOATIME */
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <fcntl.h>
int main(void) {
    int i=(int)O_NOATIME;
    return 0;
}],ac_cv_noatime=yes,ac_cv_noatime=no,ac_cv_noatime=no)])
if test $ac_cv_noatime = yes; then
    AC_DEFINE(HAVE_O_NOATIME,1,[flag O_NOATIME is supported])
fi

#
# Solaris: add a flag
#
case $host in 
    *-solaris*)
        CFLAGS="${CFLAGS} -DHAM_SOLARIS"
        ;;
    *)
        ;;
esac


AC_CONFIG_FILES(Makefile src/Makefile include/Makefile include/ham/Makefile samples/Makefile unittests/Makefile 3rdparty/Makefile 3rdparty/aes/Makefile 3rdparty/zlib/Makefile tools/Makefile)
AC_OUTPUT

# Messages
printf '#================================================================\n'
printf "# Configuring hamsterdb version $PACKAGE_VERSION\n"
printf "# Settings:$settings\n"
printf '#================================================================\n'


